import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ContainerInstanceManagementClientContext } from "../containerInstanceManagementClientContext";
/** Class representing a Location. */
export declare class Location {
    private readonly client;
    /**
     * Create a Location.
     * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
     */
    constructor(client: ContainerInstanceManagementClientContext);
    /**
     * Get the usage for a subscription
     * @param location The identifier for the physical azure location.
     * @param [options] The optional parameters
     * @returns Promise<Models.LocationListUsageResponse>
     */
    listUsage(location: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationListUsageResponse>;
    /**
     * @param location The identifier for the physical azure location.
     * @param callback The callback
     */
    listUsage(location: string, callback: msRest.ServiceCallback<Models.UsageListResult>): void;
    /**
     * @param location The identifier for the physical azure location.
     * @param options The optional parameters
     * @param callback The callback
     */
    listUsage(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsageListResult>): void;
    /**
     * Get the list of cached images on specific OS type for a subscription in a region.
     * @summary Get the list of cached images.
     * @param location The identifier for the physical azure location.
     * @param [options] The optional parameters
     * @returns Promise<Models.LocationListCachedImagesResponse>
     */
    listCachedImages(location: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationListCachedImagesResponse>;
    /**
     * @param location The identifier for the physical azure location.
     * @param callback The callback
     */
    listCachedImages(location: string, callback: msRest.ServiceCallback<Models.CachedImagesListResult>): void;
    /**
     * @param location The identifier for the physical azure location.
     * @param options The optional parameters
     * @param callback The callback
     */
    listCachedImages(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CachedImagesListResult>): void;
    /**
     * Get the list of CPU/memory/GPU capabilities of a region.
     * @summary Get the list of capabilities of the location.
     * @param location The identifier for the physical azure location.
     * @param [options] The optional parameters
     * @returns Promise<Models.LocationListCapabilitiesResponse>
     */
    listCapabilities(location: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationListCapabilitiesResponse>;
    /**
     * @param location The identifier for the physical azure location.
     * @param callback The callback
     */
    listCapabilities(location: string, callback: msRest.ServiceCallback<Models.CapabilitiesListResult>): void;
    /**
     * @param location The identifier for the physical azure location.
     * @param options The optional parameters
     * @param callback The callback
     */
    listCapabilities(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CapabilitiesListResult>): void;
    /**
     * Get the list of cached images on specific OS type for a subscription in a region.
     * @summary Get the list of cached images.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.LocationListCachedImagesNextResponse>
     */
    listCachedImagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationListCachedImagesNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listCachedImagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CachedImagesListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listCachedImagesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CachedImagesListResult>): void;
    /**
     * Get the list of CPU/memory/GPU capabilities of a region.
     * @summary Get the list of capabilities of the location.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.LocationListCapabilitiesNextResponse>
     */
    listCapabilitiesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationListCapabilitiesNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listCapabilitiesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CapabilitiesListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listCapabilitiesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CapabilitiesListResult>): void;
}
//# sourceMappingURL=location.d.ts.map