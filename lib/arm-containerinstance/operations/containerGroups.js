"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerGroups = void 0;
const msRest = __importStar(require("@azure/ms-rest-js"));
const Mappers = __importStar(require("../models/containerGroupsMappers"));
const Parameters = __importStar(require("../models/parameters"));
/** Class representing a ContainerGroups. */
class ContainerGroups {
    /**
     * Create a ContainerGroups.
     * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    list(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, listOperationSpec, callback);
    }
    listByResourceGroup(resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            options
        }, listByResourceGroupOperationSpec, callback);
    }
    get(resourceGroupName, containerGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            containerGroupName,
            options
        }, getOperationSpec, callback);
    }
    /**
     * Create or update container groups with specified configurations.
     * @summary Create or update container groups.
     * @param resourceGroupName The name of the resource group.
     * @param containerGroupName The name of the container group.
     * @param containerGroup The properties of the container group to be created or updated.
     * @param [options] The optional parameters
     * @returns Promise<Models.ContainerGroupsCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName, containerGroupName, containerGroup, options) {
        return this.beginCreateOrUpdate(resourceGroupName, containerGroupName, containerGroup, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    update(resourceGroupName, containerGroupName, resource, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            containerGroupName,
            resource,
            options
        }, updateOperationSpec, callback);
    }
    deleteMethod(resourceGroupName, containerGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            containerGroupName,
            options
        }, deleteMethodOperationSpec, callback);
    }
    /**
     * Restarts all containers in a container group in place. If container image has updates, new image
     * will be downloaded.
     * @summary Restarts all containers in a container group.
     * @param resourceGroupName The name of the resource group.
     * @param containerGroupName The name of the container group.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restart(resourceGroupName, containerGroupName, options) {
        return this.beginRestart(resourceGroupName, containerGroupName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    stop(resourceGroupName, containerGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            containerGroupName,
            options
        }, stopOperationSpec, callback);
    }
    /**
     * Starts all containers in a container group.
     * @summary Starts all containers in a container group.
     * @param resourceGroupName The name of the resource group.
     * @param containerGroupName The name of the container group.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    start(resourceGroupName, containerGroupName, options) {
        return this.beginStart(resourceGroupName, containerGroupName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Create or update container groups with specified configurations.
     * @summary Create or update container groups.
     * @param resourceGroupName The name of the resource group.
     * @param containerGroupName The name of the container group.
     * @param containerGroup The properties of the container group to be created or updated.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName, containerGroupName, containerGroup, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            containerGroupName,
            containerGroup,
            options
        }, beginCreateOrUpdateOperationSpec, options);
    }
    /**
     * Restarts all containers in a container group in place. If container image has updates, new image
     * will be downloaded.
     * @summary Restarts all containers in a container group.
     * @param resourceGroupName The name of the resource group.
     * @param containerGroupName The name of the container group.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestart(resourceGroupName, containerGroupName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            containerGroupName,
            options
        }, beginRestartOperationSpec, options);
    }
    /**
     * Starts all containers in a container group.
     * @summary Starts all containers in a container group.
     * @param resourceGroupName The name of the resource group.
     * @param containerGroupName The name of the container group.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginStart(resourceGroupName, containerGroupName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            containerGroupName,
            options
        }, beginStartOperationSpec, options);
    }
    listNext(nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink,
            options
        }, listNextOperationSpec, callback);
    }
    listByResourceGroupNext(nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink,
            options
        }, listByResourceGroupNextOperationSpec, callback);
    }
}
exports.ContainerGroups = ContainerGroups;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/containerGroups",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerGroupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerGroupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.containerGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerGroup
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.containerGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "resource",
        mapper: Object.assign(Object.assign({}, Mappers.Resource), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ContainerGroup
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.containerGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerGroup
        },
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const stopOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/stop",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.containerGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.containerGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "containerGroup",
        mapper: Object.assign(Object.assign({}, Mappers.ContainerGroup), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ContainerGroup
        },
        201: {
            bodyMapper: Mappers.ContainerGroup
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginRestartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/restart",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.containerGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/start",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.containerGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerGroupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerGroupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
