"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerInstanceManagementMappers = exports.ContainerInstanceManagementModels = exports.ContainerInstanceManagementClientContext = exports.ContainerInstanceManagementClient = void 0;
const Models = __importStar(require("./models"));
exports.ContainerInstanceManagementModels = Models;
const Mappers = __importStar(require("./models/mappers"));
exports.ContainerInstanceManagementMappers = Mappers;
const operations = __importStar(require("./operations"));
const containerInstanceManagementClientContext_1 = require("./containerInstanceManagementClientContext");
Object.defineProperty(exports, "ContainerInstanceManagementClientContext", { enumerable: true, get: function () { return containerInstanceManagementClientContext_1.ContainerInstanceManagementClientContext; } });
class ContainerInstanceManagementClient extends containerInstanceManagementClientContext_1.ContainerInstanceManagementClientContext {
    /**
     * Initializes a new instance of the ContainerInstanceManagementClient class.
     * @param credentials Credentials needed for the client to connect to Azure.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
     * subscription. The subscription ID forms part of the URI for every service call.
     * @param [options] The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        super(credentials, subscriptionId, options);
        this.containerGroups = new operations.ContainerGroups(this);
        this.operations = new operations.Operations(this);
        this.containerGroupUsage = new operations.ContainerGroupUsage(this);
        this.container = new operations.ContainerOperations(this);
        this.serviceAssociationLink = new operations.ServiceAssociationLink(this);
    }
}
exports.ContainerInstanceManagementClient = ContainerInstanceManagementClient;
__exportStar(require("./operations"), exports);
